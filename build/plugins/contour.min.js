function disposeNode(a){a instanceof THREE.Camera?a=void 0:a instanceof THREE.Light?(a.dispose(),a=void 0):a instanceof THREE.Mesh?(a.geometry&&(a.geometry.dispose(),a.geometry=void 0),a.material&&(a.material instanceof THREE.MeshFaceMaterial?$.each(a.material.materials,function(a,b){b.map&&b.map.dispose(),b.lightMap&&b.lightMap.dispose(),b.bumpMap&&b.bumpMap.dispose(),b.normalMap&&b.normalMap.dispose(),b.specularMap&&b.specularMap.dispose(),b.envMap&&b.envMap.dispose(),b.dispose(),b=void 0}):(a.material.map&&a.material.map.dispose(),a.material.lightMap&&a.material.lightMap.dispose(),a.material.bumpMap&&a.material.bumpMap.dispose(),a.material.normalMap&&a.material.normalMap.dispose(),a.material.specularMap&&a.material.specularMap.dispose(),a.material.envMap&&a.material.envMap.dispose(),a.material.dispose(),a.material=void 0)),a=void 0):a instanceof THREE.Object3D&&(a=void 0)}function disposeObject(a){function b(a,c){for(var d=a.children.length-1;d>=0;d--){var e=a.children[d];b(e,c),c(e)}}b(a,disposeNode)}function remap(a,b,c,d,e){return d+(e-d)*(a-b)/(c-b)}var MODE={VERSION:"Alpha"};MODE.boundingBox=function(a,b){return this.get(a,b)},MODE.boundingBox.prototype={constructor:{},rotationVector:new THREE.Vector3,geometry:new THREE.Geometry,bbox:new THREE.Box3,box:new THREE.BoxHelper,get:function(a,b){void 0!=b.normal&&(b=b.normal),void 0!=a.geometry&&(a=a.geometry),a=a.clone(),this.rotationVector=new THREE.Vector3(b.y,b.x,b.z),this.rotationVector.normalize();var c=this.rotationVector;a.vertices.forEach(function(a,b){a.applyAxisAngle(c,Math.PI/2)});var d=new THREE.Mesh(a,new THREE.MeshBasicMaterial({})),e=new THREE.BoxHelper(d);e.rotateOnAxis(this.rotationVector,-Math.PI/2),this.box=e;var f=new THREE.Box3;f.setFromObject(d),this.bbox=f}},MODE.planeIntersect=function(a,b){return this.get(a,b)},MODE.planeIntersect.prototype={constructor:{},orient:function(a){var b=new THREE.Vector3(0,0,1),c=b.normalize(),d=c.multiplyScalar(a);return d.z},rotationVector:new THREE.Vector3,geometry:new THREE.Geometry,get:function(a,b){function c(a,b){function c(a,b,c,d,e,f,g){var h=d*a.x+e*a.y+f*a.z+g,i=d*b.x+e*b.y+f*b.z+g,j=d*c.x+e*c.y+f*c.z+g,k=Math.sign(h),l=Math.sign(i),m=Math.sign(j),n=new THREE.Vector3,o=new THREE.Vector3;if(h>=0&&i>=0&&j>=0)return 0;if(0>=h&&0>=i&&0>=j)return 0;if(k!=l&&k!=m){n.x=a.x-h*(c.x-a.x)/(j-h),n.y=a.y-h*(c.y-a.y)/(j-h),n.z=a.z-h*(c.z-a.z)/(j-h),o.x=a.x-h*(b.x-a.x)/(i-h),o.y=a.y-h*(b.y-a.y)/(i-h),o.z=a.z-h*(b.z-a.z)/(i-h);var p=new THREE.Line3(n,o);return p}if(l!=k&&l!=m){n.x=b.x-i*(c.x-b.x)/(j-i),n.y=b.y-i*(c.y-b.y)/(j-i),n.z=b.z-i*(c.z-b.z)/(j-i),o.x=b.x-i*(a.x-b.x)/(h-i),o.y=b.y-i*(a.y-b.y)/(h-i),o.z=b.z-i*(a.z-b.z)/(h-i);var p=new THREE.Line3(n,o);return p}if(m!=l&&m!=k){n.x=c.x-j*(a.x-c.x)/(h-j),n.y=c.y-j*(a.y-c.y)/(h-j),n.z=c.z-j*(a.z-c.z)/(h-j),o.x=c.x-j*(b.x-c.x)/(i-j),o.y=c.y-j*(b.y-c.y)/(i-j),o.z=c.z-j*(b.z-c.z)/(i-j);var p=new THREE.Line3(n,o);return p}return-1}allLines=[],allPolylines=[],simpPLs=[];for(var f=b.normal.x,g=b.normal.y,h=b.normal.z,i=b.constant,j=0;j<a.faces.length;j++){var k=a.faces[j],l=a.vertices[k.a],m=a.vertices[k.b],n=a.vertices[k.c];0!=c(l,m,n,f,g,h,i)&&-1!=c(l,m,n,f,g,h,i)&&allLines.push(c(l,m,n,f,g,h,i))}for(var o=[],j=0;j<allLines.length;j++)o.push([allLines[j].start,allLines[j].end]);d(o,i);for(var p=0;p<allPolylines.length;p++)allPolylines[p].planeLoc=allPolylines.planeLoc,e.push(allPolylines[p])}function d(a,b){function c(b){var e=1e-7;d=0;for(var f=a[b],g=0;g<a.length;g++)if(b!=Math.min(g,a.length)){var h=a[Math.min(g,a.length)];f[0].distanceTo(h[0])<e?(f.unshift(h[1]),a.splice(Math.min(g,a.length),1),g--,d++):f[0].distanceTo(h[1])<e?(f.unshift(h[0]),a.splice(Math.min(g,a.length),1),g--,d++):f[f.length-1].distanceTo(h[1])<e?(f.push(h[0]),a.splice(Math.min(g,a.length),1),g--,d++):f[f.length-1].distanceTo(h[0])<e&&(f.push(h[1]),a.splice(Math.min(g,a.length),1),g--,d++),g==a.length-1&&c(0==d?b+1:b)}}var d=0;c(0),a.planeLoc=-b,allPolylines=a}a=a.clone(),b.constructor!=Array&&(b=[b]);var e=[];this.rotationVector=new THREE.Vector3(b[0].normal.y,b[0].normal.x,b[0].normal.z),this.rotationVector.normalize();var f=this.rotationVector;a.vertices.forEach(function(a,b){a.applyAxisAngle(f,Math.PI/2)}),b.forEach(function(b,d){var e=new THREE.Plane(new THREE.Vector3(0,0,1),b.constant);c(a,e)});var g=[];e.forEach(function(a,b){var c=new THREE.Shape;a.forEach(function(a,b){0==b?c.moveTo(a.x,a.y,a.z):c.lineTo(a.x,a.y,a.z)}),c.planeLoc=a.planeLoc,g.push(c)}),this.crvs=e,this.shapes=g},extrude:function(a,b){extrusions=new THREE.Object3D;var c=this,d=this.rotationVector;return this.shapes.forEach(function(d,e){var f=new THREE.ExtrudeGeometry(d,b);polyMesh=new THREE.Mesh(f,a),polyMesh.position.z=c.orient(d.planeLoc),extrusions.add(polyMesh)}),extrusions.rotateOnAxis(d,-Math.PI/2),extrusions.updateMatrixWorld(!0),this.extrusions=extrusions,extrusions},surface:function(a){srfs=new THREE.Object3D;var b=this,c=this.rotationVector,d=this.shapes.length;return this.shapes.forEach(function(c,e){var f=new THREE.ShapeGeometry(c),g=a.clone();g.color=new THREE.Color("hsl(0, 0%, "+Math.round(e/d*100)+"%)");var h=new THREE.Mesh(f,g);h.position.z=b.orient(c.planeLoc),srfs.add(h)}),srfs.rotateOnAxis(c,-Math.PI/2),srfs.updateMatrixWorld(!0),this.surfaces=srfs,srfs},wireframe:function(a){wires=new THREE.Object3D;this.crvs.forEach(function(b,c){var d=new THREE.Geometry;d.vertices=b;var e=new THREE.Line(d,a);wires.add(e)});var b=this.rotationVector;return wires.rotateOnAxis(b,-Math.PI/2),wires.updateMatrixWorld(!0),this.wires=wires,wires},toSVG:function(a,b){var c=a.attr("height");a.attr("width",c*((b[1]-b[0])/(b[3]-b[2]))),a.selectAll("path").remove();var d=d3.scale.linear().domain([b[0],b[1]]).range([0,parseFloat(a.attr("width"))]),e=d3.scale.linear().domain([b[3],b[2]]).range([0,parseFloat(a.attr("height"))]),f=d3.scale.linear().domain([b[4],b[5]]).range(["yellow",d3.rgb(47,161,214)]);this.crvs.forEach(function(a,b){a.pts=[],a.forEach(function(b,c){a.pts.push([d(b.x),e(b.y)])})});var g=d3.svg.line();a.selectAll("path").data(this.crvs).enter().append("path"),a.selectAll("path").attr("d",function(a,b){return g(a.pts)}).attr("fill","none").attr("stroke",function(a){return f(a.planeLoc)})}};